{"version":3,"sources":["Todo.js","Input.js","Counter.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_this$props","this","props","text","onToggle","onDelete","react_default","a","createElement","onClick","className","Component","Input","_this","type","placeholder","onKeyUp","event","keyupfunction","Counter","count","Header","App","state","todos","toggleDone","index","newTodos","Object","toConsumableArray","slice","concat","objectSpread","isDone","setState","deleteTodo","newDelete","addTodoArray","key","newEntry","target","value","_this2","countTodos","filter","length","src_Header_0","src_Counter_0","src_Input_0","map","todo","src_Todo_0","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dd41535c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Todo.css'\n\nclass Todo extends Component {\n  render() {\n    const { text, onToggle, onDelete } = this.props\n    return (\n      <li>\n        <span onClick={onToggle} className=\"Todo\">\n          {text}\n        </span>\n        <button onClick={onDelete}>&times;</button>\n      </li>\n    )\n  }\n}\n\nexport default Todo\n","import React, { Component } from 'react'\nimport './Input.css'\n\nclass Input extends Component {\n  render() {\n    return (\n      <div className=\"input-wrapper\">\n        <input\n          type=\"text\"\n          placeholder=\"Add your todo in the list\"\n          className=\"Input\"\n          onKeyUp={event => {\n            this.props.keyupfunction(event)\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Input\n","import React, { Component } from 'react'\nimport './Counter.css'\n\nclass Counter extends Component {\n  render() {\n    return <h1 className=\"Counter\">Done: {this.props.count}</h1>\n  }\n}\n\nexport default Counter\n","import React, { Component } from 'react'\nimport './Header.css'\n\nclass Header extends Component {\n  render() {\n    return <div className=\"Header\">Todo-list: Xmas 2018</div>\n  }\n}\nexport default Header\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport Todo from './Todo'\nimport Input from './Input'\nimport Counter from './Counter'\nimport Header from './Header'\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  toggleDone = index => {\n    const { todos } = this.state\n    const newTodos = [\n      ...todos.slice(0, index),\n      { ...todos[index], isDone: !todos[index].isDone },\n      ...todos.slice(index + 1)\n    ]\n    this.setState({ todos: newTodos })\n  }\n\n  deleteTodo = index => {\n    const { todos } = this.state\n    const newDelete = [...todos.slice(0, index), ...todos.slice(index + 1)]\n    this.setState({ todos: newDelete })\n  }\n\n  addTodoArray = event => {\n    if (event.key === 'Enter') {\n      const newEntry = [\n        { text: event.target.value, isDone: false },\n        ...this.state.todos\n      ]\n      this.setState({\n        todos: newEntry\n      })\n      event.target.value = ''\n    }\n  }\n\n  render() {\n    const countTodos = this.state.todos.filter(todos => todos.isDone).length\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <Counter count={countTodos} />\n        <Input keyupfunction={this.addTodoArray} />\n        <ul>\n          {this.state.todos.map((todo, index) => {\n            return (\n              <Todo\n                key={todo.text}\n                text={todo.text}\n                onToggle={() => this.toggleDone(index)}\n                onDelete={() => this.deleteTodo(index)}\n              />\n            )\n          })}\n        </ul>\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}